{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../auth.service\";\nexport class UserService {\n  get isLogged() {\n    return !!this.user;\n  }\n  constructor(http, authService) {\n    // try {\n    //   const lsUser = localStorage.getItem(this.USER_KEY) || '';\n    //   this.user = JSON.parse(lsUser);\n    // } catch (error) {\n    //   this.user = undefined;\n    // }\n    this.http = http;\n    this.authService = authService;\n    this.user$$ = new BehaviorSubject(undefined);\n    this.user$ = this.user$$.asObservable();\n    this.USER_KEY = 'user';\n    this.subscription = this.user$.subscribe(user => {\n      this.user = user;\n    });\n    const userString = localStorage.getItem('user');\n    if (userString) {\n      const user = JSON.parse(userString);\n      this.user$$.next(user);\n    }\n  }\n  login(email, password) {\n    const {\n      apiUrl\n    } = environment;\n    return this.http.post(`${apiUrl}/api/users/login`, {\n      email,\n      password\n    }).pipe(tap(user => {\n      this.user$$.next(user);\n      localStorage.setItem('user', JSON.stringify(user));\n      if (user.token) {\n        sessionStorage.setItem('token', user.token);\n      }\n    }));\n  }\n  register(username, email, password, rePassword) {\n    const {\n      apiUrl\n    } = environment;\n    return this.http.post(`${apiUrl}/api/users/register`, {\n      username,\n      email,\n      password,\n      rePassword\n    }).pipe(tap(user => {\n      this.user$$.next(user);\n      localStorage.setItem('user', JSON.stringify(user));\n      if (user.token) {\n        sessionStorage.setItem('token', user.token);\n      }\n    }));\n  }\n  logout() {\n    this.authService.logout();\n    this.user$$.next(undefined);\n  }\n  getProfile() {\n    const {\n      apiUrl\n    } = environment;\n    return this.http.get(`${apiUrl}/api/users/profile`).pipe(tap(user => this.user$$.next(user)));\n  }\n  updateProfile(username, email) {\n    const {\n      apiUrl\n    } = environment;\n    console.log(username, email);\n    return this.http.put(`${apiUrl}/api/users/profile`, {\n      username,\n      email\n    }).pipe(tap(user => this.user$$.next(user)));\n  }\n  getCurrentUserId() {\n    return this.user?._id || null;\n  }\n  getCurrentUserUsername() {\n    return this.user?.username || null;\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","tap","environment","UserService","isLogged","user","constructor","http","authService","user$$","undefined","user$","asObservable","USER_KEY","subscription","subscribe","userString","localStorage","getItem","JSON","parse","next","login","email","password","apiUrl","post","pipe","setItem","stringify","token","sessionStorage","register","username","rePassword","logout","getProfile","get","updateProfile","console","log","put","getCurrentUserId","_id","getCurrentUserUsername","ngOnDestroy","unsubscribe","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["D:\\JS\\AngularProjects\\fandom\\fandom\\src\\app\\user\\user.service.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { User } from '../types/user';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Subscription, tap, Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { AuthService } from '../auth.service';\nimport { UserWithToken } from '../types/userToken';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService implements OnDestroy {\n  private user$$ = new BehaviorSubject<User | undefined>(undefined);\n  public user$ = this.user$$.asObservable();\n\n  user: User | undefined;\n  USER_KEY = 'user';\n\n  subscription: Subscription;\n\n  get isLogged(): boolean {\n\n    return !!this.user;\n  }\n\n  constructor(private http: HttpClient, private authService: AuthService) {\n    // try {\n    //   const lsUser = localStorage.getItem(this.USER_KEY) || '';\n    //   this.user = JSON.parse(lsUser);\n    // } catch (error) {\n    //   this.user = undefined;\n    // }\n\n    this.subscription = this.user$.subscribe((user) => {\n      this.user = user;\n    });\n\n    const userString = localStorage.getItem('user');\n    if (userString) {\n      const user: User = JSON.parse(userString);\n      this.user$$.next(user);\n    }\n  }\n\n\n  login(email: string, password: string) {\n\n    const { apiUrl } = environment;  \n    \n   \n    return this.http.post<UserWithToken>(`${ apiUrl }/api/users/login`, { email, password })\n      .pipe(tap((user) => {\n        this.user$$.next(user)\n        localStorage.setItem('user', JSON.stringify(user))\n        if (user.token) {\n          sessionStorage.setItem('token', user.token); \n        }\n      }));\n\n  }\n\n  register(username: string, email: string, password: string, rePassword: string) {\n    const { apiUrl } = environment;\n\n   \n\n    return this.http.post<UserWithToken>(`${ apiUrl }/api/users/register`, { username, email, password, rePassword })\n      .pipe(tap((user) => {\n        this.user$$.next(user)\n        localStorage.setItem('user', JSON.stringify(user))\n        if (user.token) {\n          sessionStorage.setItem('token', user.token); \n        }\n      }));\n\n  }\n\n  logout(){\n    \n    this.authService.logout();\n    this.user$$.next(undefined);\n  }\n\n  getProfile() {\n    const { apiUrl } = environment;\n\n    return this.http\n      .get<User>(`${ apiUrl }/api/users/profile`)\n      .pipe(tap((user) => this.user$$.next(user)));\n  }\n\n  updateProfile(username: string, email: string) {\n    const { apiUrl } = environment;\n    console.log(username, email)\n    return this.http\n      .put<User>(`${ apiUrl }/api/users/profile`, { username, email })\n      .pipe(tap((user) => this.user$$.next(user)));\n  }\n\n  getCurrentUserId(): string | null {\n    return this.user?._id || null;\n  }\n\n  getCurrentUserUsername(): string | null {\n    return this.user?.username || null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}