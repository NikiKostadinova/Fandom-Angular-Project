{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { catchError, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/api.service\";\nimport * as i3 from \"@angular/router\";\nexport class EditBookComponent {\n  constructor(fb, apiService, activatedRoute) {\n    this.fb = fb;\n    this.apiService = apiService;\n    this.activatedRoute = activatedRoute;\n  }\n  ngOnInit() {\n    this.fetchBook();\n    this.bookForm = this.fb.group({\n      name: ['', Validators.required],\n      author: ['', Validators.required],\n      image: ['', Validators.required],\n      published: ['', Validators.required],\n      genre: ['', Validators.required],\n      description: ['', Validators.required]\n    });\n  }\n  fetchBook() {\n    const id = this.activatedRoute.snapshot.params['id'];\n    this.apiService.getBook(id).subscribe(book => {\n      this.book = book;\n      this.bookForm.patchValue({\n        name: this.book.name,\n        author: this.book.author,\n        image: this.book.image,\n        published: this.book.published,\n        genre: this.book.genre,\n        description: this.book.description\n      });\n    });\n  }\n  // buildForm(): void {\n  //   this.bookForm = this.fb.group({\n  //     name: ['', Validators.required],\n  //     author: ['', Validators.required],\n  //     image: ['', Validators.required],\n  //     published: ['', Validators.required],\n  //     genre: ['', Validators.required],\n  //     description: ['', Validators.required],\n  //   });   \n  // }\n  onSubmit() {\n    if (this.bookForm.invalid) {\n      return;\n    }\n    const formData = this.bookForm.value;\n    const bookToUpdate = {\n      ...this.book,\n      ...formData\n    };\n    this.apiService.updateBook(bookToUpdate).pipe(tap(updatedBook => {\n      console.log('Book updated successfully', updatedBook);\n    }), catchError(error => {\n      console.error('Error updating book:', error);\n      return [];\n    })).subscribe();\n  }\n}\nEditBookComponent.ɵfac = function EditBookComponent_Factory(t) {\n  return new (t || EditBookComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n};\nEditBookComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EditBookComponent,\n  selectors: [[\"app-edit-book\"]],\n  decls: 11,\n  vars: 1,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"title\"], [\"type\", \"text\", \"id\", \"title\", \"name\", \"title\", \"formControlName\", \"title\", \"required\", \"\"], [\"for\", \"author\"], [\"type\", \"text\", \"id\", \"author\", \"name\", \"author\", \"formControlName\", \"author\", \"required\", \"\"], [\"type\", \"submit\"]],\n  template: function EditBookComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function EditBookComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"div\")(2, \"label\", 1);\n      i0.ɵɵtext(3, \"Title:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\")(6, \"label\", 3);\n      i0.ɵɵtext(7, \"Author:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"button\", 5);\n      i0.ɵɵtext(10, \"Save Changes\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.bookForm);\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["Validators","catchError","tap","EditBookComponent","constructor","fb","apiService","activatedRoute","ngOnInit","fetchBook","bookForm","group","name","required","author","image","published","genre","description","id","snapshot","params","getBook","subscribe","book","patchValue","onSubmit","invalid","formData","value","bookToUpdate","updateBook","pipe","updatedBook","console","log","error","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","ApiService","i3","ActivatedRoute","selectors","decls","vars","consts","template","EditBookComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","EditBookComponent_Template_form_ngSubmit_0_listener","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵproperty"],"sources":["D:\\JS\\AngularProjects\\fandom\\fandom\\src\\app\\categories\\edit-book\\edit-book.component.ts","D:\\JS\\AngularProjects\\fandom\\fandom\\src\\app\\categories\\edit-book\\edit-book.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ApiService } from 'src/app/api.service';\nimport { Book } from 'src/app/types/book';\nimport { catchError, tap } from 'rxjs';\n\n\n@Component({\n  selector: 'app-edit-book',\n  templateUrl: './edit-book.component.html',\n  styleUrls: ['./edit-book.component.css']\n})\nexport class EditBookComponent implements OnInit {\n  book!: Book;\n  bookForm!: FormGroup;\n\n  constructor(private fb: FormBuilder, private apiService: ApiService, private activatedRoute: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.fetchBook();\n    this.bookForm = this.fb.group({\n      name: ['', Validators.required],\n      author: ['', Validators.required],\n      image: ['', Validators.required],\n      published: ['', Validators.required],\n      genre: ['', Validators.required],\n      description: ['', Validators.required],\n    })\n  }\n\n  fetchBook(): void {\n    const id = this.activatedRoute.snapshot.params['id'];\n\n    this.apiService.getBook(id).subscribe((book) => {\n      this.book = book;\n      this.bookForm.patchValue({\n        name: this.book.name,\n        author: this.book.author,\n        image: this.book.image,\n        published: this.book.published,\n        genre: this.book.genre,\n        description: this.book.description\n      });\n    });\n  }\n\n  // buildForm(): void {\n  //   this.bookForm = this.fb.group({\n  //     name: ['', Validators.required],\n  //     author: ['', Validators.required],\n  //     image: ['', Validators.required],\n  //     published: ['', Validators.required],\n  //     genre: ['', Validators.required],\n  //     description: ['', Validators.required],\n  //   });   \n    \n  // }\n\n  onSubmit(): void {\n    if(this.bookForm.invalid) {\n      return;\n    }\n\n    const formData = this.bookForm.value;\n    const bookToUpdate: Book = { ...this.book, ...formData};   \n\n    this.apiService.updateBook(bookToUpdate).pipe(tap((updatedBook) => {\n       console.log('Book updated successfully', updatedBook);\n    }),\n    catchError((error) => {\n      console.error('Error updating book:', error);\n      return [];\n    })\n    ).subscribe();\n  }\n\n  //  bookDetails: Book = {\n  //   name: '',\n  //   author: '',\n  //   image: {url: '', alt: ''},\n  //   published: 0,\n  //   genre: '',\n  //   description: ''\n  //  }\n\n  //  form = this.fb.group({\n  //   name: ['', Validators.required],\n  //   author: ['', Validators.required],\n  //   image: ['', Validators.required],\n  //   published: ['', Validators.required],\n  //   genre: ['', Validators.required],\n  //   description: ['', Validators.required],\n  //  })\n\n  //  constructor(private fb: FormBuilder, private apiService: ApiService) {}\n\n  //  ngOnInit(): void {\n  //    const { name, author, image, published, genre, description } = this.apiService.book!;\n  //    this.bookDetails = {\n  //     name, \n  //     author, \n  //     image, \n  //     published, \n  //     genre, \n  //     description\n  //    };\n\n  //    this.form.setValue({\n  //     name, \n  //     author, \n  //     image, \n  //     published, \n  //     genre, \n  //     description\n  //    });\n  //  }\n\n  //  saveBookHandler(): void {\n  //   if(this.form.invalid){\n  //     return;\n  //   }\n\n  //   this.bookDetails = { ...this.form.value } as Book;\n  //   const { name, author, image, published, genre, description } = this.bookDetails;\n\n  //   this.apiService.updateBook(name!, author!, image!, published!, genre!, description!).subscribe(() => {\n\n  //   })\n  //  }\n\n}\n\n","<form [formGroup]=\"bookForm\" (ngSubmit)=\"onSubmit()\">\n    <div>\n      <label for=\"title\">Title:</label>\n      <input type=\"text\" id=\"title\" name=\"title\" formControlName=\"title\" required>\n    </div>\n    <div>\n      <label for=\"author\">Author:</label>\n      <input type=\"text\" id=\"author\" name=\"author\" formControlName=\"author\" required>\n    </div>\n    <!-- Add more input fields as needed for other book properties -->\n    <button type=\"submit\">Save Changes</button>\n  </form>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}