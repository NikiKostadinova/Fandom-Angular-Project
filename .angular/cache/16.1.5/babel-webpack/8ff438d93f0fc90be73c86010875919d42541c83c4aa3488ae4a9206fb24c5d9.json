{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n  }\n  // comments: Comment[] = [];\n  // get commentsList(): string {\n  //   return this.comments || [];\n  // }\n  getBooks() {\n    const {\n      apiUrl\n    } = environment;\n    return this.http.get(`${apiUrl}/api/books`);\n  }\n  getBook(id) {\n    const {\n      apiUrl\n    } = environment;\n    return this.http.get(`${apiUrl}/api/books/${id}`);\n  }\n  create(name, author, image, published, genre, description, owner) {\n    const {\n      apiUrl\n    } = environment;\n    return this.http.post(`${apiUrl}/api/books/create`, {\n      name,\n      author,\n      image,\n      published,\n      genre,\n      description,\n      owner\n    });\n  }\n  updateBook(bookToUpdate) {\n    const {\n      apiUrl\n    } = environment;\n    const update = this.http.put(`${apiUrl}/api/books/${bookToUpdate._id}/editBook`, bookToUpdate);\n    return update;\n  }\n  getBookComments(bookId, limit) {\n    const {\n      apiUrl\n    } = environment;\n    const limitFilter = limit ? `?limit=${limit}` : '';\n    return this.http.get(`${apiUrl}/api/books/${bookId}/comments${limitFilter}`);\n  }\n  updateBookWithComment(book) {\n    const {\n      apiUrl\n    } = environment;\n    const url = `${apiUrl}/api/books/${book._id}/editBook`;\n    const updatedBook = {\n      _id: book._id,\n      author: book.author,\n      image: book.image,\n      published: book.published,\n      genre: book.genre,\n      description: book.description,\n      createdAt: book.createdAt,\n      commentList: book.commentList\n    };\n    return this.http.put(url, updatedBook);\n  }\n  deleteBook(id) {\n    const {\n      apiUrl\n    } = environment;\n    const url = `${apiUrl}/api/books/${id}`;\n    return this.http.delete(url);\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["environment","ApiService","constructor","http","getBooks","apiUrl","get","getBook","id","create","name","author","image","published","genre","description","owner","post","updateBook","bookToUpdate","update","put","_id","getBookComments","bookId","limit","limitFilter","updateBookWithComment","book","url","updatedBook","createdAt","commentList","deleteBook","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\JS\\AngularProjects\\fandom\\fandom\\src\\app\\api.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Book } from './types/book';\nimport { Image } from './types/image';\nimport { Comment } from './types/comment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor(private http: HttpClient) { }\n\n  // comments: Comment[] = [];\n\n  // get commentsList(): string {\n  //   return this.comments || [];\n  // }\n\n  getBooks() {\n    const { apiUrl } = environment;\n\n    return this.http.get<Book[]>(`${apiUrl}/api/books`);\n\n  }\n\n  getBook(id: any): Observable<Book> {\n    const { apiUrl } = environment;\n\n    return this.http.get<Book>(`${apiUrl}/api/books/${id}`);\n\n  }\n\n\n  create(name: string, author: string, image: Image, published: number, genre: string, description: string, owner: string) {\n    \n    const { apiUrl } = environment; \n    return this.http.post<Book>(`${apiUrl}/api/books/create`, { name, author, image, published, genre, description, owner });\n  }\n \n  updateBook(bookToUpdate: Book): Observable<Book> {\n    const { apiUrl } = environment;\n    \n   const update = this.http.put<Book>(`${apiUrl}/api/books/${bookToUpdate._id}/editBook`, bookToUpdate);\n    return update;\n  }\n\n  getBookComments(bookId: string, limit?: number): Observable<Comment[]> {\n    const { apiUrl } = environment; \n    const limitFilter = limit ? `?limit=${limit}` : '';\n    return this.http.get<Comment[]>(`${apiUrl}/api/books/${bookId}/comments${limitFilter}`);\n  }\n\n  updateBookWithComment(book: Book): Observable<Book> {\n    const { apiUrl } = environment; \n    const url = `${apiUrl}/api/books/${book._id}/editBook`;\n\n    const updatedBook: Partial<Book> = {\n      _id: book._id,\n      author: book.author,\n      image: book.image,\n      published: book.published,\n      genre: book.genre,\n      description: book.description,\n      createdAt: book.createdAt,\n      commentList: book.commentList,\n    };\n\n    \n   \n    \n    return this.http.put<Book>(url, updatedBook);\n  }\n\n  deleteBook(id: string) {\n    const { apiUrl } = environment;\n    const url = `${apiUrl}/api/books/${id}`;\n    return this.http.delete(url);\n\n  }\n\n}\n"],"mappings":"AAGA,SAASA,WAAW,QAAQ,8BAA8B;;;AAQ1D,OAAM,MAAOC,UAAU;EAErBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExC;EAEA;EACA;EACA;EAEAC,QAAQA,CAAA;IACN,MAAM;MAAEC;IAAM,CAAE,GAAGL,WAAW;IAE9B,OAAO,IAAI,CAACG,IAAI,CAACG,GAAG,CAAS,GAAGD,MAAM,YAAY,CAAC;EAErD;EAEAE,OAAOA,CAACC,EAAO;IACb,MAAM;MAAEH;IAAM,CAAE,GAAGL,WAAW;IAE9B,OAAO,IAAI,CAACG,IAAI,CAACG,GAAG,CAAO,GAAGD,MAAM,cAAcG,EAAE,EAAE,CAAC;EAEzD;EAGAC,MAAMA,CAACC,IAAY,EAAEC,MAAc,EAAEC,KAAY,EAAEC,SAAiB,EAAEC,KAAa,EAAEC,WAAmB,EAAEC,KAAa;IAErH,MAAM;MAAEX;IAAM,CAAE,GAAGL,WAAW;IAC9B,OAAO,IAAI,CAACG,IAAI,CAACc,IAAI,CAAO,GAAGZ,MAAM,mBAAmB,EAAE;MAAEK,IAAI;MAAEC,MAAM;MAAEC,KAAK;MAAEC,SAAS;MAAEC,KAAK;MAAEC,WAAW;MAAEC;IAAK,CAAE,CAAC;EAC1H;EAEAE,UAAUA,CAACC,YAAkB;IAC3B,MAAM;MAAEd;IAAM,CAAE,GAAGL,WAAW;IAE/B,MAAMoB,MAAM,GAAG,IAAI,CAACjB,IAAI,CAACkB,GAAG,CAAO,GAAGhB,MAAM,cAAcc,YAAY,CAACG,GAAG,WAAW,EAAEH,YAAY,CAAC;IACnG,OAAOC,MAAM;EACf;EAEAG,eAAeA,CAACC,MAAc,EAAEC,KAAc;IAC5C,MAAM;MAAEpB;IAAM,CAAE,GAAGL,WAAW;IAC9B,MAAM0B,WAAW,GAAGD,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAG,EAAE;IAClD,OAAO,IAAI,CAACtB,IAAI,CAACG,GAAG,CAAY,GAAGD,MAAM,cAAcmB,MAAM,YAAYE,WAAW,EAAE,CAAC;EACzF;EAEAC,qBAAqBA,CAACC,IAAU;IAC9B,MAAM;MAAEvB;IAAM,CAAE,GAAGL,WAAW;IAC9B,MAAM6B,GAAG,GAAG,GAAGxB,MAAM,cAAcuB,IAAI,CAACN,GAAG,WAAW;IAEtD,MAAMQ,WAAW,GAAkB;MACjCR,GAAG,EAAEM,IAAI,CAACN,GAAG;MACbX,MAAM,EAAEiB,IAAI,CAACjB,MAAM;MACnBC,KAAK,EAAEgB,IAAI,CAAChB,KAAK;MACjBC,SAAS,EAAEe,IAAI,CAACf,SAAS;MACzBC,KAAK,EAAEc,IAAI,CAACd,KAAK;MACjBC,WAAW,EAAEa,IAAI,CAACb,WAAW;MAC7BgB,SAAS,EAAEH,IAAI,CAACG,SAAS;MACzBC,WAAW,EAAEJ,IAAI,CAACI;KACnB;IAKD,OAAO,IAAI,CAAC7B,IAAI,CAACkB,GAAG,CAAOQ,GAAG,EAAEC,WAAW,CAAC;EAC9C;EAEAG,UAAUA,CAACzB,EAAU;IACnB,MAAM;MAAEH;IAAM,CAAE,GAAGL,WAAW;IAC9B,MAAM6B,GAAG,GAAG,GAAGxB,MAAM,cAAcG,EAAE,EAAE;IACvC,OAAO,IAAI,CAACL,IAAI,CAAC+B,MAAM,CAACL,GAAG,CAAC;EAE9B;;AAtEW5B,UAAU,C;mBAAVA,UAAU,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAVrC,UAAU,C;SAAVA,UAAU;EAAAsC,OAAA,EAAVtC,UAAU,CAAAuC,IAAA;EAAAC,UAAA,EAFT;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}