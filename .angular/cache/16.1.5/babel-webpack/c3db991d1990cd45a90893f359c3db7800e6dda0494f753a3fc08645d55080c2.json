{"ast":null,"code":"var _class;\nimport { __decorate } from \"tslib\";\nimport { HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { catchError } from \"rxjs\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./core/error/error.service\";\nconst {\n  apiUrl\n} = environment;\nexport let AppInterceptor = (_class = class AppInterceptor {\n  constructor(router, errorService) {\n    this.router = router;\n    this.errorService = errorService;\n  }\n  intercept(req, next) {\n    console.log('Before', req);\n    if (req.url.startsWith('/api')) {\n      const token = localStorage.getItem('token');\n      req = req.clone({\n        url: req.url.replace('/api', apiUrl),\n        withCredentials: true,\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    console.log('After', req);\n    return next.handle(req).pipe(catchError(err => {\n      if (err.status === 401) {\n        this.router.navigate(['/login']);\n      } else {\n        this.errorService.setError(err);\n        this.router.navigate(['/error']);\n      }\n      return [err];\n    }));\n  }\n}, _class.ɵfac = function AppInterceptor_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ErrorService));\n}, _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n}), _class);\nAppInterceptor = __decorate([Injectable()], AppInterceptor);\nexport const appInterceptorProvider = {\n  multi: true,\n  useClass: AppInterceptor,\n  provide: HTTP_INTERCEPTORS\n};","map":{"version":3,"names":["HTTP_INTERCEPTORS","Injectable","catchError","environment","apiUrl","AppInterceptor","_class","constructor","router","errorService","intercept","req","next","console","log","url","startsWith","token","localStorage","getItem","clone","replace","withCredentials","setHeaders","Authorization","handle","pipe","err","status","navigate","setError","i0","ɵɵinject","i1","Router","i2","ErrorService","factory","ɵfac","__decorate","appInterceptorProvider","multi","useClass","provide"],"sources":["D:\\JS\\AngularProjects\\fandom\\fandom\\src\\app\\app.interceptor.ts"],"sourcesContent":["import { HTTP_INTERCEPTORS, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable, Provider } from \"@angular/core\";\r\nimport { Observable, catchError } from \"rxjs\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport { Router } from \"@angular/router\";\r\nimport { ErrorService } from \"./core/error/error.service\";\r\n\r\nconst { apiUrl } = environment;\r\n\r\n@Injectable()\r\n\r\n\r\n\r\n\r\n@Injectable()\r\nexport class AppInterceptor implements HttpInterceptor {\r\n    constructor(private router: Router, private errorService: ErrorService) {\r\n\r\n    }\r\n\r\n\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        console.log('Before', req)\r\n        if (req.url.startsWith('/api')) {\r\n            const token = localStorage.getItem('token');\r\n            req = req.clone({\r\n                url: req.url.replace('/api', apiUrl),\r\n                withCredentials: true,\r\n                setHeaders: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            })\r\n         \r\n\r\n        }\r\n\r\n        console.log('After', req)\r\n\r\n        \r\n\r\n        return next.handle(req).pipe(\r\n            catchError((err) => {\r\n\r\n                if (err.status === 401) {\r\n                    this.router.navigate(['/login']);\r\n                } else {\r\n                    this.errorService.setError(err);\r\n                    this.router.navigate(['/error']);\r\n                }\r\n\r\n                return [err];\r\n            })\r\n        );\r\n    }\r\n}\r\n\r\nexport const appInterceptorProvider: Provider = {\r\n    multi: true,\r\n    useClass: AppInterceptor,\r\n    provide: HTTP_INTERCEPTORS\r\n}"],"mappings":";;AAAA,SAASA,iBAAiB,QAA8D,sBAAsB;AAC9G,SAASC,UAAU,QAAkB,eAAe;AACpD,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,WAAW,QAAQ,8BAA8B;;;;AAI1D,MAAM;EAAEC;AAAM,CAAE,GAAGD,WAAW;AAQvB,WAAME,cAAc,IAAAC,MAAA,GAApB,MAAMD,cAAc;EACvBE,YAAoBC,MAAc,EAAUC,YAA0B;IAAlD,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,YAAY,GAAZA,YAAY;EAExD;EAIAC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAE9CC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEH,GAAG,CAAC;IAC1B,IAAIA,GAAG,CAACI,GAAG,CAACC,UAAU,CAAC,MAAM,CAAC,EAAE;MAC5B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3CR,GAAG,GAAGA,GAAG,CAACS,KAAK,CAAC;QACZL,GAAG,EAAEJ,GAAG,CAACI,GAAG,CAACM,OAAO,CAAC,MAAM,EAAEjB,MAAM,CAAC;QACpCkB,eAAe,EAAE,IAAI;QACrBC,UAAU,EAAE;UACRC,aAAa,EAAE,UAAUP,KAAK;;OAErC,CAAC;;IAKNJ,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEH,GAAG,CAAC;IAIzB,OAAOC,IAAI,CAACa,MAAM,CAACd,GAAG,CAAC,CAACe,IAAI,CACxBxB,UAAU,CAAEyB,GAAG,IAAI;MAEf,IAAIA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;QACpB,IAAI,CAACpB,MAAM,CAACqB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;OACnC,MAAM;QACH,IAAI,CAACpB,YAAY,CAACqB,QAAQ,CAACH,GAAG,CAAC;QAC/B,IAAI,CAACnB,MAAM,CAACqB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;MAGpC,OAAO,CAACF,GAAG,CAAC;IAChB,CAAC,CAAC,CACL;EACL;;mBAxCStB,MAAc,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA;AAAA,G;SAAd/B,MAAc;EAAAgC,OAAA,EAAdhC,MAAc,CAAAiC;AAAA,IAAAhC,MAAA,C;AAAdD,cAAc,GAAAkC,UAAA,EAD1BtC,UAAU,EAAE,C,EACAI,cAAc,CAyC1B;AAED,OAAO,MAAMmC,sBAAsB,GAAa;EAC5CC,KAAK,EAAE,IAAI;EACXC,QAAQ,EAAErC,cAAc;EACxBsC,OAAO,EAAE3C;CACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}