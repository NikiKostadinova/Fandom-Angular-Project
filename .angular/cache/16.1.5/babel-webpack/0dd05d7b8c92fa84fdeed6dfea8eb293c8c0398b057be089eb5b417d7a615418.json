{"ast":null,"code":"import { HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nconst {\n  apiUrl\n} = environment;\nexport class AppInterceptor {\n  intercept(req, next) {\n    const idToken = localStorage.getItem(\"token\");\n    if (idToken) {\n      const cloned = req.clone({\n        headers: req.headers.set(\"Authorization\", \"Bearer\" + idToken)\n      });\n      return next.handle(cloned);\n    } else {\n      return next.handle(req);\n    }\n  }\n}\n// @Injectable()\n// export class AppInterceptor implements HttpInterceptor {\n//     constructor(private router: Router, private errorService: ErrorService) {\n//     }\n//     intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n//         console.log('Before', req)\n//         if (req.url.startsWith('/api')) {\n//             const token = localStorage.getItem('token');\n//             req = req.clone({\n//                 url: req.url.replace('/api', apiUrl),\n//                 withCredentials: true,\n//                 setHeaders: {\n//                     Authorization: `Bearer ${token}`\n//                 }\n//             })\n//         }\n//         console.log('After', req)\n//         return next.handle(req).pipe(\n//             catchError((err) => {\n//                 if (err.status === 401) {\n//                     this.router.navigate(['/login']);\n//                 } else {\n//                     this.errorService.setError(err);\n//                     this.router.navigate(['/error']);\n//                 }\n//                 return [err];\n//             })\n//         );\n//     }\n// }\nAppInterceptor.ɵfac = function AppInterceptor_Factory(t) {\n  return new (t || AppInterceptor)();\n};\nAppInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppInterceptor,\n  factory: AppInterceptor.ɵfac\n});\nexport const appInterceptorProvider = {\n  multi: true,\n  useClass: AppInterceptor,\n  provide: HTTP_INTERCEPTORS\n};","map":{"version":3,"names":["HTTP_INTERCEPTORS","environment","apiUrl","AppInterceptor","intercept","req","next","idToken","localStorage","getItem","cloned","clone","headers","set","handle","factory","ɵfac","appInterceptorProvider","multi","useClass","provide"],"sources":["D:\\JS\\AngularProjects\\fandom\\fandom\\src\\app\\app.interceptor.ts"],"sourcesContent":["import { HTTP_INTERCEPTORS, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable, Provider } from \"@angular/core\";\r\nimport { Observable, catchError } from \"rxjs\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport { Router } from \"@angular/router\";\r\nimport { ErrorService } from \"./core/error/error.service\";\r\n\r\nconst { apiUrl } = environment;\r\n\r\n@Injectable()\r\n\r\nexport class AppInterceptor implements HttpInterceptor {\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const idToken = localStorage.getItem(\"token\");\r\n\r\n        if(idToken) {\r\n            const cloned = req.clone({\r\n                headers: req.headers.set(\"Authorization\", \"Bearer\" + idToken)\r\n            });\r\n\r\n            return next.handle(cloned)\r\n        }else{\r\n            return next.handle(req)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// @Injectable()\r\n// export class AppInterceptor implements HttpInterceptor {\r\n//     constructor(private router: Router, private errorService: ErrorService) {\r\n\r\n//     }\r\n\r\n\r\n\r\n//     intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n//         console.log('Before', req)\r\n//         if (req.url.startsWith('/api')) {\r\n//             const token = localStorage.getItem('token');\r\n//             req = req.clone({\r\n//                 url: req.url.replace('/api', apiUrl),\r\n//                 withCredentials: true,\r\n//                 setHeaders: {\r\n//                     Authorization: `Bearer ${token}`\r\n//                 }\r\n//             })\r\n         \r\n\r\n//         }\r\n\r\n//         console.log('After', req)\r\n\r\n        \r\n\r\n//         return next.handle(req).pipe(\r\n//             catchError((err) => {\r\n\r\n//                 if (err.status === 401) {\r\n//                     this.router.navigate(['/login']);\r\n//                 } else {\r\n//                     this.errorService.setError(err);\r\n//                     this.router.navigate(['/error']);\r\n//                 }\r\n\r\n//                 return [err];\r\n//             })\r\n//         );\r\n//     }\r\n// }\r\n\r\nexport const appInterceptorProvider: Provider = {\r\n    multi: true,\r\n    useClass: AppInterceptor,\r\n    provide: HTTP_INTERCEPTORS\r\n}"],"mappings":"AAAA,SAASA,iBAAiB,QAA8D,sBAAsB;AAG9G,SAASC,WAAW,QAAQ,8BAA8B;;AAI1D,MAAM;EAAEC;AAAM,CAAE,GAAGD,WAAW;AAI9B,OAAM,MAAOE,cAAc;EACvBC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAC9C,MAAMC,OAAO,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE7C,IAAGF,OAAO,EAAE;MACR,MAAMG,MAAM,GAAGL,GAAG,CAACM,KAAK,CAAC;QACrBC,OAAO,EAAEP,GAAG,CAACO,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,QAAQ,GAAGN,OAAO;OAC/D,CAAC;MAEF,OAAOD,IAAI,CAACQ,MAAM,CAACJ,MAAM,CAAC;KAC7B,MAAI;MACD,OAAOJ,IAAI,CAACQ,MAAM,CAACT,GAAG,CAAC;;EAE/B;;AAQJ;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA/DaF,cAAc,C;mBAAdA,cAAc;AAAA;AAAdA,cAAc,C;SAAdA,cAAc;EAAAY,OAAA,EAAdZ,cAAc,CAAAa;AAAA;AAiE3B,OAAO,MAAMC,sBAAsB,GAAa;EAC5CC,KAAK,EAAE,IAAI;EACXC,QAAQ,EAAEhB,cAAc;EACxBiB,OAAO,EAAEpB;CACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}