{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  get isLogged() {\n    return !!this.user;\n  }\n  constructor(http) {\n    // try {\n    //   const lsUser = localStorage.getItem(this.USER_KEY) || '';\n    //   this.user = JSON.parse(lsUser);\n    // } catch (error) {\n    //   this.user = undefined;\n    // }\n    this.http = http;\n    this.user$$ = new BehaviorSubject(undefined);\n    this.user$ = this.user$$.asObservable();\n    this.USER_KEY = '[user]';\n    this.subscription = this.user$.subscribe(user => {\n      this.user = user;\n    });\n  }\n  login(email, password) {\n    // this.user = {\n    //   email: 'john.doe@gmail.com',\n    //   username: 'John',\n    //   password: '123456'\n    // };\n    // localStorage.setItem(this.USER_KEY, JSON.stringify(this.user));\n    return this.http.post('api/users/login', {\n      email,\n      password\n    });\n  }\n  register(username, email, password, rePassword) {\n    // this.user = {\n    //   email: 'john.doe@gmail.com',\n    //   username: 'John',\n    //   password: '123456'\n    // };\n    // localStorage.setItem(this.USER_KEY, JSON.stringify(this.user));\n    return this.http.post('/api/users/register', {\n      username,\n      email,\n      password,\n      rePassword\n    }).pipe(tap(user => this.user$$.next(user)));\n  }\n  logout() {\n    this.user = undefined;\n    localStorage.removeItem(this.USER_KEY);\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","tap","UserService","isLogged","user","constructor","http","user$$","undefined","user$","asObservable","USER_KEY","subscription","subscribe","login","email","password","post","register","username","rePassword","pipe","next","logout","localStorage","removeItem","ngOnDestroy","unsubscribe","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\JS\\AngularProjects\\fandom\\fandom\\src\\app\\user\\user.service.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { User } from '../types/user';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Subscription, tap } from 'rxjs';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService implements OnDestroy {\n  private user$$ = new BehaviorSubject<User | undefined>(undefined);\n  public user$ = this.user$$.asObservable();\n\n  user: User | undefined;\n  USER_KEY = '[user]';\n\n  subscription: Subscription;\n\n  get isLogged(): boolean {\n\n    return !!this.user;\n  }\n\n  constructor(private http: HttpClient) {\n    // try {\n    //   const lsUser = localStorage.getItem(this.USER_KEY) || '';\n    //   this.user = JSON.parse(lsUser);\n    // } catch (error) {\n    //   this.user = undefined;\n    // }\n\n    this.subscription = this.user$.subscribe((user) => {\n      this.user = user;\n    })\n  }\n\n  login(email: string, password: string) {\n\n    // this.user = {\n    //   email: 'john.doe@gmail.com',\n    //   username: 'John',\n    //   password: '123456'\n    // };\n\n    // localStorage.setItem(this.USER_KEY, JSON.stringify(this.user));\n\n    return this.http.post('api/users/login', { email, password })\n\n  }\n\n  register(username: string, email: string, password: string, rePassword: string) {\n\n\n    // this.user = {\n    //   email: 'john.doe@gmail.com',\n    //   username: 'John',\n    //   password: '123456'\n    // };\n\n    // localStorage.setItem(this.USER_KEY, JSON.stringify(this.user));\n\n    return this.http.post<User>('/api/users/register', { username, email, password, rePassword })\n    .pipe(tap((user) => this.user$$.next(user)));\n\n  }\n\n  logout() {\n    this.user = undefined;\n    localStorage.removeItem(this.USER_KEY);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n"],"mappings":"AAGA,SAASA,eAAe,EAAgBC,GAAG,QAAQ,MAAM;;;AAOzD,OAAM,MAAOC,WAAW;EAStB,IAAIC,QAAQA,CAAA;IAEV,OAAO,CAAC,CAAC,IAAI,CAACC,IAAI;EACpB;EAEAC,YAAoBC,IAAgB;IAClC;IACA;IACA;IACA;IACA;IACA;IANkB,KAAAA,IAAI,GAAJA,IAAI;IAbhB,KAAAC,MAAM,GAAG,IAAIP,eAAe,CAAmBQ,SAAS,CAAC;IAC1D,KAAAC,KAAK,GAAG,IAAI,CAACF,MAAM,CAACG,YAAY,EAAE;IAGzC,KAAAC,QAAQ,GAAG,QAAQ;IAiBjB,IAAI,CAACC,YAAY,GAAG,IAAI,CAACH,KAAK,CAACI,SAAS,CAAET,IAAI,IAAI;MAChD,IAAI,CAACA,IAAI,GAAGA,IAAI;IAClB,CAAC,CAAC;EACJ;EAEAU,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IAEnC;IACA;IACA;IACA;IACA;IAEA;IAEA,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAC,iBAAiB,EAAE;MAAEF,KAAK;MAAEC;IAAQ,CAAE,CAAC;EAE/D;EAEAE,QAAQA,CAACC,QAAgB,EAAEJ,KAAa,EAAEC,QAAgB,EAAEI,UAAkB;IAG5E;IACA;IACA;IACA;IACA;IAEA;IAEA,OAAO,IAAI,CAACd,IAAI,CAACW,IAAI,CAAO,qBAAqB,EAAE;MAAEE,QAAQ;MAAEJ,KAAK;MAAEC,QAAQ;MAAEI;IAAU,CAAE,CAAC,CAC5FC,IAAI,CAACpB,GAAG,CAAEG,IAAI,IAAK,IAAI,CAACG,MAAM,CAACe,IAAI,CAAClB,IAAI,CAAC,CAAC,CAAC;EAE9C;EAEAmB,MAAMA,CAAA;IACJ,IAAI,CAACnB,IAAI,GAAGI,SAAS;IACrBgB,YAAY,CAACC,UAAU,CAAC,IAAI,CAACd,QAAQ,CAAC;EACxC;EAEAe,WAAWA,CAAA;IACT,IAAI,CAACd,YAAY,CAACe,WAAW,EAAE;EACjC;;AAhEWzB,WAAW,C;mBAAXA,WAAW,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAX7B,WAAW,C;SAAXA,WAAW;EAAA8B,OAAA,EAAX9B,WAAW,CAAA+B,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}