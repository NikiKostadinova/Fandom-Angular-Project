{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  get isLogged() {\n    return !!this.user;\n  }\n  constructor(http) {\n    this.http = http;\n    this.user$$ = new BehaviorSubject(undefined);\n    this.user$ = this.user$$.asObservable();\n    this.USER_KEY = 'user';\n    this.subscription = this.user$.subscribe(user => {\n      this.user = user;\n    });\n    const userString = localStorage.getItem('user');\n    if (userString) {\n      const user = JSON.parse(userString);\n      this.user$$.next(user);\n    }\n  }\n  getToken() {\n    const userString = localStorage.getItem('user');\n    if (userString) {\n      const user = JSON.parse(userString);\n      return user.token;\n    }\n    return null;\n  }\n  login(email, password) {\n    const {\n      apiUrl\n    } = environment;\n    return this.http.post(`${apiUrl}/api/users/login`, {\n      email,\n      password\n    }).pipe(tap(user => {\n      this.user$$.next(user);\n      localStorage.setItem('user', JSON.stringify(user));\n      console.log(user.token);\n      if (user.token) {\n        sessionStorage.setItem('token', user.token);\n      }\n    }));\n  }\n  register(username, email, password, rePassword) {\n    const {\n      apiUrl\n    } = environment;\n    return this.http.post(`${apiUrl}/api/users/register`, {\n      username,\n      email,\n      password,\n      rePassword\n    }).pipe(tap(user => {\n      this.user$$.next(user);\n      localStorage.setItem('user', JSON.stringify(user));\n      if (user.token) {\n        sessionStorage.setItem('token', user.token);\n      }\n    }));\n  }\n  logout() {\n    localStorage.removeItem(this.USER_KEY);\n    sessionStorage.clear();\n    this.user$$.next(undefined);\n  }\n  getProfile() {\n    const {\n      apiUrl\n    } = environment;\n    return this.http.get(`${apiUrl}/api/users/profile`).pipe(tap(user => this.user$$.next(user)));\n  }\n  updateProfile(username, email, headers) {\n    const {\n      apiUrl\n    } = environment;\n    return this.http.put(`${apiUrl}/api/users/profile`, {\n      username,\n      email\n    }, {\n      headers\n    }).pipe(tap(user => this.user$$.next(user)));\n  }\n  getCurrentUserId() {\n    return this.user?._id || null;\n  }\n  getCurrentUserUsername() {\n    return this.user?.username || null;\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","tap","environment","UserService","isLogged","user","constructor","http","user$$","undefined","user$","asObservable","USER_KEY","subscription","subscribe","userString","localStorage","getItem","JSON","parse","next","getToken","token","login","email","password","apiUrl","post","pipe","setItem","stringify","console","log","sessionStorage","register","username","rePassword","logout","removeItem","clear","getProfile","get","updateProfile","headers","put","getCurrentUserId","_id","getCurrentUserUsername","ngOnDestroy","unsubscribe","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\JS\\AngularProjects\\fandom\\fandom\\src\\app\\user\\user.service.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { User } from '../types/user';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Subscription, tap, Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService implements OnDestroy {\n  private user$$ = new BehaviorSubject<User | undefined>(undefined);\n  public user$ = this.user$$.asObservable();\n\n  user: User | undefined;\n  USER_KEY = 'user';\n\n  subscription: Subscription;\n\n  get isLogged(): boolean {\n\n    return !!this.user;\n  }\n\n  constructor(private http: HttpClient) {\n    \n    this.subscription = this.user$.subscribe((user) => {\n      this.user = user;\n    });\n\n    const userString = localStorage.getItem('user');\n    if (userString) {\n      const user: User = JSON.parse(userString);\n      this.user$$.next(user);\n    }\n  }\n\n  getToken(): string | null {\n    const userString = localStorage.getItem('user');\n    if (userString) {\n      const user: User = JSON.parse(userString);\n      return user.token;\n    }\n    return null;\n  }\n\n\n  login(email: string, password: string) {\n\n    const { apiUrl } = environment;  \n    \n   \n    return this.http.post<User>(`${ apiUrl }/api/users/login`, { email, password })\n      .pipe(tap((user) => {\n        this.user$$.next(user)\n        localStorage.setItem('user', JSON.stringify(user))\n        console.log(user.token)\n        if (user.token) {         \n          sessionStorage.setItem('token', user.token); \n        }\n      }));\n\n  }\n\n  register(username: string, email: string, password: string, rePassword: string) {\n    const { apiUrl } = environment;   \n\n    return this.http.post<User>(`${ apiUrl }/api/users/register`, { username, email, password, rePassword })\n      .pipe(tap((user) => {\n        this.user$$.next(user)\n        localStorage.setItem('user', JSON.stringify(user))\n        if (user.token) {\n          sessionStorage.setItem('token', user.token); \n        }\n      }));\n\n  }\n\n  logout(): void{\n    \n    localStorage.removeItem(this.USER_KEY);\n    sessionStorage.clear();\n    this.user$$.next(undefined);\n  }\n\n  getProfile() {\n    const { apiUrl } = environment;\n\n    return this.http\n      .get<User>(`${ apiUrl }/api/users/profile`)\n      .pipe(tap((user) => this.user$$.next(user)));\n  }\n\n  updateProfile(username: string, email: string, headers?: any) {\n    const { apiUrl } = environment;\n    \n    return this.http\n      .put<User>(`${ apiUrl }/api/users/profile`, { username, email }, {headers})\n      .pipe(tap((user) => this.user$$.next(user)));\n  }\n\n  getCurrentUserId(): string | null {\n    return this.user?._id || null;\n  }\n\n  getCurrentUserUsername(): string | null {\n    return this.user?.username || null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}