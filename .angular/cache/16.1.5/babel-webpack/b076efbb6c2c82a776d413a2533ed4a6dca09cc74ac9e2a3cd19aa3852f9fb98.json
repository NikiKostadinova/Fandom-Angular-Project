{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { DEFAULT_EMAIL_DOMAINS } from 'src/app/shared/constants';\nimport { appEmailValidator } from 'src/app/shared/validators/app-email-validator';\nexport let ProfileComponent = class ProfileComponent {\n  get isLoggedIn() {\n    return this.userService.isLogged;\n  }\n  constructor(fb, userService, apiService) {\n    this.fb = fb;\n    this.userService = userService;\n    this.apiService = apiService;\n    this.wishListBooks = [];\n    this.profileDetails = {\n      username: '',\n      email: ''\n    };\n    this.isEditMode = false;\n    this.form = this.fb.group({\n      username: ['', [Validators.required, Validators.minLength(5)]],\n      email: ['', [Validators.required, appEmailValidator(DEFAULT_EMAIL_DOMAINS)]]\n      // ToDo: render this from the template and make more fields on click of a button\n      // persons: this.fb.array([]),\n    });\n  }\n\n  ngOnInit() {\n    this.userService.user$.subscribe(user => {\n      this.user = user;\n      if (user) {\n        this.fetchWishListBooks();\n      }\n    });\n    const {\n      username,\n      email\n    } = this.userService.user;\n    this.profileDetails = {\n      username,\n      email\n    };\n    this.form.setValue({\n      username,\n      email\n    });\n  }\n  fetchWishListBooks() {\n    if (this.user?.wishList) {\n      this.apiService.getBooks().subscribe(books => {\n        this.wishListBooks = books.filter(book => this.user?.wishList.includes(book._id));\n      });\n    }\n  }\n  toggleEditMode() {\n    this.isEditMode = !this.isEditMode;\n  }\n  saveProfileHandler() {\n    if (this.form.invalid) {\n      return;\n    }\n    this.profileDetails = {\n      ...this.form.value\n    };\n    // const { username, email } = this.profileDetails;\n    const updatedUser = {\n      ...this.userService.user,\n      username: this.profileDetails.username,\n      email: this.profileDetails.email\n    };\n    // const headers = {\n    //   Authorization: `Bearer ${this.userService.getToken()}`\n    // };\n    this.userService.updateProfile(updatedUser).subscribe(() => {\n      this.toggleEditMode();\n    });\n  }\n};\nProfileComponent = __decorate([Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})], ProfileComponent);","map":{"version":3,"names":["Component","Validators","DEFAULT_EMAIL_DOMAINS","appEmailValidator","ProfileComponent","isLoggedIn","userService","isLogged","constructor","fb","apiService","wishListBooks","profileDetails","username","email","isEditMode","form","group","required","minLength","ngOnInit","user$","subscribe","user","fetchWishListBooks","setValue","wishList","getBooks","books","filter","book","includes","_id","toggleEditMode","saveProfileHandler","invalid","value","updatedUser","updateProfile","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\JS\\AngularProjects\\fandom\\fandom\\src\\app\\user\\profile\\profile.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { DEFAULT_EMAIL_DOMAINS } from 'src/app/shared/constants';\nimport { appEmailValidator } from 'src/app/shared/validators/app-email-validator';\nimport { UserService } from '../user.service';\nimport { User } from 'src/app/types/user';\nimport { Book } from 'src/app/types/book';\nimport { ApiService } from 'src/app/api.service';\n\ninterface Profile {\n  username: string;\n  email: string;\n\n}\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n  user: User | undefined;\n  wishListBooks: Book[] = [];\n  profileDetails: Profile = {\n    username: '',\n    email: '',\n   \n  };\n\n  get isLoggedIn (): boolean {\n    return this.userService.isLogged\n  }\n  \n  isEditMode: boolean = false;\n\n  form = this.fb.group({\n    username: ['', [Validators.required, Validators.minLength(5)]],\n    email: [\n      '',\n      [Validators.required, appEmailValidator(DEFAULT_EMAIL_DOMAINS)],\n    ],\n    \n    // ToDo: render this from the template and make more fields on click of a button\n    // persons: this.fb.array([]),\n  });\n\n  constructor(private fb: FormBuilder, private userService: UserService, private apiService: ApiService) { }\n\n  ngOnInit(): void {\n    this.userService.user$.subscribe((user) => {\n      this.user = user;\n      if (user) {\n        this.fetchWishListBooks();\n      }\n    });\n    const { username, email } = this.userService.user!;\n    this.profileDetails = {\n      username,\n      email,\n      \n    };\n\n    this.form.setValue({\n      username,\n      email,\n      \n    });\n  }\n  \n\n  fetchWishListBooks(): void {\n    if (this.user?.wishList) {\n      this.apiService.getBooks().subscribe((books) => {\n        this.wishListBooks = books.filter(book => this.user?.wishList.includes(book._id));\n      });\n    }\n  }\n\n  toggleEditMode(): void {\n    this.isEditMode = !this.isEditMode;\n  }\n\n  saveProfileHandler(): void {\n    if (this.form.invalid) {      \n      return;\n    }\n\n    this.profileDetails = { ...this.form.value } as Profile;\n    // const { username, email } = this.profileDetails;\n\n    const updatedUser: User = {\n      ...this.userService.user!,\n      username: this.profileDetails.username,\n      email: this.profileDetails.email,\n    };\n\n    // const headers = {\n    //   Authorization: `Bearer ${this.userService.getToken()}`\n    // };\n   \n    \n    this.userService.updateProfile(updatedUser).subscribe(() => {\n      this.toggleEditMode();\n    });\n  }\n}\n\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAsBC,UAAU,QAAQ,gBAAgB;AACxD,SAASC,qBAAqB,QAAQ,0BAA0B;AAChE,SAASC,iBAAiB,QAAQ,+CAA+C;AAiB1E,WAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAS3B,IAAIC,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACC,WAAW,CAACC,QAAQ;EAClC;EAeAC,YAAoBC,EAAe,EAAUH,WAAwB,EAAUI,UAAsB;IAAjF,KAAAD,EAAE,GAAFA,EAAE;IAAuB,KAAAH,WAAW,GAAXA,WAAW;IAAuB,KAAAI,UAAU,GAAVA,UAAU;IAxBzF,KAAAC,aAAa,GAAW,EAAE;IAC1B,KAAAC,cAAc,GAAY;MACxBC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE;KAER;IAMD,KAAAC,UAAU,GAAY,KAAK;IAE3B,KAAAC,IAAI,GAAG,IAAI,CAACP,EAAE,CAACQ,KAAK,CAAC;MACnBJ,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACiB,QAAQ,EAAEjB,UAAU,CAACkB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9DL,KAAK,EAAE,CACL,EAAE,EACF,CAACb,UAAU,CAACiB,QAAQ,EAAEf,iBAAiB,CAACD,qBAAqB,CAAC,CAAC;MAGjE;MACA;KACD,CAAC;EAEuG;;EAEzGkB,QAAQA,CAAA;IACN,IAAI,CAACd,WAAW,CAACe,KAAK,CAACC,SAAS,CAAEC,IAAI,IAAI;MACxC,IAAI,CAACA,IAAI,GAAGA,IAAI;MAChB,IAAIA,IAAI,EAAE;QACR,IAAI,CAACC,kBAAkB,EAAE;;IAE7B,CAAC,CAAC;IACF,MAAM;MAAEX,QAAQ;MAAEC;IAAK,CAAE,GAAG,IAAI,CAACR,WAAW,CAACiB,IAAK;IAClD,IAAI,CAACX,cAAc,GAAG;MACpBC,QAAQ;MACRC;KAED;IAED,IAAI,CAACE,IAAI,CAACS,QAAQ,CAAC;MACjBZ,QAAQ;MACRC;KAED,CAAC;EACJ;EAGAU,kBAAkBA,CAAA;IAChB,IAAI,IAAI,CAACD,IAAI,EAAEG,QAAQ,EAAE;MACvB,IAAI,CAAChB,UAAU,CAACiB,QAAQ,EAAE,CAACL,SAAS,CAAEM,KAAK,IAAI;QAC7C,IAAI,CAACjB,aAAa,GAAGiB,KAAK,CAACC,MAAM,CAACC,IAAI,IAAI,IAAI,CAACP,IAAI,EAAEG,QAAQ,CAACK,QAAQ,CAACD,IAAI,CAACE,GAAG,CAAC,CAAC;MACnF,CAAC,CAAC;;EAEN;EAEAC,cAAcA,CAAA;IACZ,IAAI,CAAClB,UAAU,GAAG,CAAC,IAAI,CAACA,UAAU;EACpC;EAEAmB,kBAAkBA,CAAA;IAChB,IAAI,IAAI,CAAClB,IAAI,CAACmB,OAAO,EAAE;MACrB;;IAGF,IAAI,CAACvB,cAAc,GAAG;MAAE,GAAG,IAAI,CAACI,IAAI,CAACoB;IAAK,CAAa;IACvD;IAEA,MAAMC,WAAW,GAAS;MACxB,GAAG,IAAI,CAAC/B,WAAW,CAACiB,IAAK;MACzBV,QAAQ,EAAE,IAAI,CAACD,cAAc,CAACC,QAAQ;MACtCC,KAAK,EAAE,IAAI,CAACF,cAAc,CAACE;KAC5B;IAED;IACA;IACA;IAGA,IAAI,CAACR,WAAW,CAACgC,aAAa,CAACD,WAAW,CAAC,CAACf,SAAS,CAAC,MAAK;MACzD,IAAI,CAACW,cAAc,EAAE;IACvB,CAAC,CAAC;EACJ;CACD;AArFY7B,gBAAgB,GAAAmC,UAAA,EAL5BvC,SAAS,CAAC;EACTwC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EACWtC,gBAAgB,CAqF5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}