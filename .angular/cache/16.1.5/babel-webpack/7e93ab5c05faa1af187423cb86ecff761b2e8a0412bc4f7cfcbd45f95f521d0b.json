{"ast":null,"code":"import { tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl;\n  }\n  login(email, password) {\n    return this.http.post(`${this.apiUrl}/api/users/login`, {\n      email,\n      password\n    }).pipe(tap(response => {\n      if (response.token) {\n        sessionStorage.setItem('token', response.token);\n      }\n    }));\n  }\n  register(username, email, password, rePassword) {\n    return this.http.post(`${this.apiUrl}/api/users/register`, {\n      username,\n      email,\n      password,\n      rePassword\n    }).pipe(tap(user => {\n      if (user.token) {\n        // Store the token in sessionStorage\n        sessionStorage.setItem('token', user.token);\n      }\n    }));\n  }\n  logout() {\n    sessionStorage.removeItem('token');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["tap","environment","AuthService","constructor","http","apiUrl","login","email","password","post","pipe","response","token","sessionStorage","setItem","register","username","rePassword","user","logout","removeItem","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\JS\\AngularProjects\\fandom\\fandom\\src\\app\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { UserWithToken } from './types/userToken';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n    private apiUrl = environment.apiUrl;\n  constructor(private http: HttpClient) { }\n\n  login(email: string, password: string) {\n    return this.http.post<any>(`${this.apiUrl}/api/users/login`, { email, password })\n    .pipe(\n      tap(response => {\n        if(response.token){\n          sessionStorage.setItem('token', response.token);\n        }\n      })\n    )\n  }\n\n  register(username: string, email: string, password: string, rePassword: string): Observable<UserWithToken> {\n    return this.http.post<UserWithToken>(`${this.apiUrl}/api/users/register`, { username, email, password, rePassword })\n      .pipe(\n        tap(user => {\n          if (user.token) {\n            // Store the token in sessionStorage\n            sessionStorage.setItem('token', user.token);\n          }\n        })\n      );\n  }\n\n   logout() {\n    sessionStorage.removeItem('token');\n   }\n\n\n\n}\n"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;AACtC,SAASC,WAAW,QAAQ,8BAA8B;;;AAM1D,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADd,KAAAC,MAAM,GAAGJ,WAAW,CAACI,MAAM;EACG;EAExCC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAM,GAAG,IAAI,CAACJ,MAAM,kBAAkB,EAAE;MAAEE,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAChFE,IAAI,CACHV,GAAG,CAACW,QAAQ,IAAG;MACb,IAAGA,QAAQ,CAACC,KAAK,EAAC;QAChBC,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACC,KAAK,CAAC;;IAEnD,CAAC,CAAC,CACH;EACH;EAEAG,QAAQA,CAACC,QAAgB,EAAET,KAAa,EAAEC,QAAgB,EAAES,UAAkB;IAC5E,OAAO,IAAI,CAACb,IAAI,CAACK,IAAI,CAAgB,GAAG,IAAI,CAACJ,MAAM,qBAAqB,EAAE;MAAEW,QAAQ;MAAET,KAAK;MAAEC,QAAQ;MAAES;IAAU,CAAE,CAAC,CACjHP,IAAI,CACHV,GAAG,CAACkB,IAAI,IAAG;MACT,IAAIA,IAAI,CAACN,KAAK,EAAE;QACd;QACAC,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEI,IAAI,CAACN,KAAK,CAAC;;IAE/C,CAAC,CAAC,CACH;EACL;EAECO,MAAMA,CAAA;IACLN,cAAc,CAACO,UAAU,CAAC,OAAO,CAAC;EACnC;;AA7BUlB,WAAW,C;mBAAXA,WAAW,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXtB,WAAW,C;SAAXA,WAAW;EAAAuB,OAAA,EAAXvB,WAAW,CAAAwB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}